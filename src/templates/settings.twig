{# @var craft \craft\web\twig\variables\CraftVariable #}
{#
/**
 * Document Search plugin for Craft CMS 3.x
 *
 * Document Search Settings.twig
 *
 * @author    Venveo
 * @copyright Copyright (c) 2019 Venveo
 * @link      https://venveo.com
 * @package   DocumentSearch
 * @since     1.0.0
 */
#}
{% import "_includes/forms" as forms %}
<style>
    #settings-all-public-field label {
        font-weight: bold;
    }
</style>
<div class="field first">
    {{ forms.autosuggestField({
        label: "Location of pdftotext executable on server"|t('document-search'),
        id: 'pdfToTextExecutable',
        first: true,
        name: 'pdfToTextExecutable',
        required: true,
        errors: (not binaries.pdftotext),
        value: settings['pdfToTextExecutable'],
        suggestEnvVars: true
    }) }}
</div>

{% if not binaries.pdftotext %}
    <div class="field">
        <p class="warning">Could not locate required binary:
            <code>pdftotext</code>
        </p>
    </div>
{% endif %}

<div class="field">
    <div class="heading"><label>Indexed Volumes</label></div>
    {% set volumes = craft.app.volumes.allVolumes %}
    <ul><li>
        {{ forms.checkbox({
            label: 'All',
            name: 'indexAllVolumes',
            value: '1',
            checked: settings.indexAllVolumes,
            reverseToggle: '#volume-list'
        }) }}
        </li>
        <div id="volume-list">
    {% for option in volumes %}
        <li>
        {{ forms.checkbox({
            label: option.name ~ ' (' ~ option.handle ~ ')',
            id: 'indexVolumes-'~option.id,
            class: 'indexVolumes',
            name: 'indexVolumes[]',
            value: option.uid,
            checked: (option.uid in settings['indexVolumes'])
        }) }}
        </li>
    {% endfor %}
        </div>
    </ul>
</div>

<div class="field">
    {{ forms.textField({
        label: "Maximum file size in kilobytes"|t('app'),
        id: "maximumDocumentSize",
        name: "maximumDocumentSize",
        size: 8,
        value: settings['maximumDocumentSize'],
        errors: (settings is defined ? settings.getErrors('maximumDocumentSize') : null),
    }) }}
</div>

{% js %}
var selectAll = document.getElementById('settings-all-public')
var indexVolumes = document.querySelectorAll('.indexVolumes')
var updateAllCheckbox = function (e) {
    if ((e && e.checked === true) || this.checked === true) {
        Object.keys(indexVolumes).forEach(function (k) {
            indexVolumes[k].checked = true
            indexVolumes[k].disabled = true
        })
    } else {
        Object.keys(indexVolumes).forEach(function (k) {
            indexVolumes[k].disabled = false
        })
    }
}
selectAll.addEventListener('click', updateAllCheckbox)
document.body.addEventListener('submit', function (e) {
    Object.keys(indexVolumes).forEach(function (k) {
        indexVolumes[k].disabled = false
    })
})
updateAllCheckbox(selectAll)
{% endjs %}
